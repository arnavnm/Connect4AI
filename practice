#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May  6 17:20:18 2020

@author: arnavmisra
"""
import math


def middle_elem(values):
    
    assert len(values) >= 1
    
    print(len(values)//2)
    if len(values) % 2 == 1 :
        
        print('odd')
        return values[len(values)//2 ]
    
    else:
        return values[len(values)//2]
        

def sqrt(value):

     return math.sqrt(value)        
 
def mylen(s):

    if s == '' :
        return 0
    
    else:
        rem_rest = mylen(s[1:])
        
        return 1 + rem_rest
    
def power(b, p):

    if p == 0:
        return 1
    
    else:
        rem_rest = power(b,p-1)
        
        return b * rem_rest
    
def num_vowels(s):

    if len(s) == 0:
        return 0
    
    else:
        rem_rest = num_vowels(s[1:]) 
        
        if s[0] in 'aeiou':
            return 1 + rem_rest
        else: 
            return 0 + rem_rest
    
    
def my_max(values):

    if len(values) == 1 :
        return values[0]
    
    else:
        rem_rest = my_max(values[1:])
        
        if values[0] > rem_rest :
            
            return values[0]
        
        else:
            return rem_rest
        
def rep(s, old, new):

    if len(s) == 0:
        return ''

    else:
        rem_rest = rep(s[1:], old, new)
        
        if s[0] == old :
            return new + rem_rest
        else: 
            return s[0] + rem_rest
        
def num_vowelslc(s):

    lc = len([x for x in s if x in'aeiou']) 
    return lc       
        

def remove_vowels(s):
    if len(s) == 0:
        return ''
    
    else: 
        rem_rest = remove_vowels(s[1:])
        
        if s[0] in 'aeiou' :
            return rem_rest
        
        else:
            return s[0] + rem_rest
        
def shortest_words(words):

    lc = [[len(words), x] for x in words ] 
    print(lc)
    short = min(lc)
    
    return short[1]


def jscore(s1,s2):
    
    if len(s1) == 0 or len(s2) == 0:
        return 0
    
    else:
        rem_rest = jscore(s1[1:], s2)
        if s1[0] in s2:
            return 1 + rem_rest
        else: 
            return 0 + rem_rest 

def rem_first(elem, value):
    if len(value) == 0 :
        return []
    elif value[0] == elem:
        return value[1:]
    
    else:
        rem_rest = rem_first(elem, value[1:])
        return value[0:1] + rem_rest
    
    
def is_pal(s):
     if len(s) <= 1 :
         return False
     elif s[0] != s[-1]:
         return False
     
     else:
         rem_rest = is_pal(s[1:-1])
         
     return True        
         
 
def bin_to_dec(value):
    
    if len(value) == 0 :
        return 0
    else:
        rem_rest = dec_to_bin(value[1:])
        if value[0] == '1':
            print(value)
            print(len(value))
            return power(2,len(value)-1) + rem_rest
        else:
            return rem_rest
        
        
def dec_to_bin(s)    :
    
    if s == 1:
        return '1'
    
    else:
        rem_rest = dec_to_bin(s//2)
        
        if s%2 == 1:
            return  rem_rest + '1'
        else:
            return  rem_rest + '0'
        
def swap_bits(s):
    
    
    a = ''
    for i in s : 
        if i == '1' :
            a += '0'
        else:
            a += '1'
    return a         

def swap_bitsrc(s):
    
    if len(s) == 0:
        return ''
    else:
        rem_rest = swap_bitsrc(s[1:])
        
        if s[0] == '1' :
            return '0' + rem_rest
        else:
            return '1' + rem_rest
        
def num_divisors(n):
    
    
        lc = [x for x in range(1,n+1) if n%x == 0 ] 
        
        return len(lc)
        
def most_divisors(values):
    
    lc = [[num_divisors(w), w] for w in values]
    max_lc = max(lc)
    return max_lc[1]
    
def summ(values):
    a = 0
    for i in values:
        a += i
    return a    
def mystery(vals):

    result = 0
    for i in range(len(vals)):
        if vals[i] == vals[i-1]:
            print(vals[i], vals[i-1])
            result += 1
    return result           
   
def multiples(n,bound):
    a = n
    while a < bound -n :
        a += n
        print(a)
    return a     
         
def mini(values):
    a = values[0]
    for i in values:
        if i < a :
            a = i
    return a         

def prime(n):
    for i in range(2,n):
        if n%i == 0:
            return False
    return True    
        
for row in range(3):
     for col in range(6):
         print(, end ='')
     print()         